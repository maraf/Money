@inherits ModalDialog

@code
{
    RenderFragment FieldTab(SelectedField field, bool isFilled, string icon, string placeholder, RenderFragment value)
    {
        placeholder = "...";
        return
            @<div class="col text-center text-truncate cursor-pointer pb-1 @(Selected == field ? "border-bottom border-primary" : "")" style="--bs-border-width: 3px;" @onclick="(() => SetSelectedField(field))">
                <span class="@(!isFilled ? "text-secondary" : "")">
                    <h3>
                        <Icon Identifier="@icon" />
                        @if (Errors.Get(field).Any())
                        {
                            <Icon Identifier="exclamation-circle" class="text-danger expense-wizard-validation-error" />
                        }
                    </h3>
                    <span class="@(!isFilled ? "fst-italic" : null)">
                        @if (!isFilled)
                        {
                            @placeholder
                        }
                        else
                        {
                            @value
                        }
                    </span>
                </span>
            </div>
        ;
    }
}

<Modal @ref="Modal" Title="Create a new Expense" BodyCssClass="px-1 py-0" IsOverflow="true" IsForm="false" IsCloseButton="false">
    <ChildContent>
        <div class="sticky-top mb-2 bg-body">
            <div class="row g-1 p-3">
                @FieldTab(SelectedField.Description, !String.IsNullOrEmpty(Description), "comment", "Description", 
                    @<span>@Description</span>
                )
                @FieldTab(SelectedField.Amount, Amount != null, "dollar-sign", "Amount",
                    @<PriceView TagName="span" Value="Amount" />
                )
                @FieldTab(SelectedField.Category, !CategoryKey.IsEmpty, "tag", "Category",
                    @<CategoryTag Key="@CategoryKey" CssClass="d-inline-block text-truncate" />
                )
                @FieldTab(SelectedField.When, When != DateTime.MinValue, "calendar", "When",
                    @<DateValue Value="When" />
                )
            </div>
        </div>
        <div class="p-3 pt-0">
            @if (Selected == SelectedField.Description)
            {
                <Validation ErrorMessages="@Errors.Description" />
                <form @onsubmit="() => SetSelectedField(SelectedField.Amount)">
                    <input id="expense-wiz-description" type="text" class="form-control" placeholder="Expense Description" @bind="@Description" @bind:event="oninput" @bind:after="SuggestTemplates" />
                </form>
                <div class="row g-3 mt-1">
                    @foreach (var model in GetTemplates())
                    {
                        <div class="col-6 col-sm-6 col-md-4">
                            <div class="card card-hover cursor-pointer m-0" @onclick="(() => ApplyTemplate(model))">
                                <div class="card-body">
                                    <div>
                                        <PriceView TagName="strong" Value="model.Amount" Zero="CurrencyFormatter.FormatZero.Placehoder" />
                                    </div>

                                    @if (!model.CategoryKey.IsEmpty)
                                    {
                                        <CategoryTag Key="@model.CategoryKey" />
                                    }

                                    @if (!String.IsNullOrEmpty(model.Description) || model.IsFixed)
                                    {
                                        <div class="text-truncate">
                                            <small>
                                                @model.Description

                                                @if (model.IsFixed)
                                                {
                                                    <em class="text-muted ms-1">Fixed</em>
                                                }
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (Selected == SelectedField.Amount)
            {
                <Validation ErrorMessages="@Errors.Amount" />
                <form @onsubmit="() => SetSelectedField(SelectedField.Category)">
                    <AmountBox Id="expense-wiz-amount" AutoSelect="true" @bind-Value="@Amount" />
                    
                    <div class="checkbox mt-3">
                        <label>
                            <input type="checkbox" @bind="IsFixed" id="expense-wiz-fixed" />
                            Fixed
                            <span class="text-muted">(isn't shown in summary)</span>
                        </label>
                    </div>
                </form>
            }
            else if (Selected == SelectedField.Category)
            {
                <Validation ErrorMessages="@Errors.Category" />
                if (Categories != null)
                {
                    <form @onsubmit="() => SetSelectedField(SelectedField.When)">
                        <div class="row g-2">
                            @foreach (var category in Categories)
                            {
                                var buttonId = $"expense-wiz-category-{category.Key.AsGuidKey().Guid.ToString()}";

                                <div class="col-6 col-md-4">
                                    <button type="submit" id="@buttonId" class="btn btn-selectable w-100 h-100 @(category.Key.Equals(CategoryKey) ? "btn-selectable-selected" : "") @category.Color.SelectAccent("back-dark", "back-light")" style="background-color: @category.Color.ToHashCode();" @onclick="@(() => CategoryKey = category.Key)">
                                        <div>
                                            <h2>@category.Icon</h2>
                                        </div>
                                        <div class="text-truncate">
                                            <strong>@category.Name</strong>
                                        </div>
                                        <div class="text-truncate">
                                            <span>@EnsureHtmlWhitespace(category.Description)</span>
                                        </div>
                                    </button>
                                </div>
                            }
                        </div>
                    </form>
                }
            }
            else if (Selected == SelectedField.When)
            {
                <Validation ErrorMessages="@Errors.When" />
                <form @onsubmit="@CreateAsync">
                    <DateBox Id="expense-wiz-when" @bind-Value="When" />
                </form>
            }
        </div>
    </ChildContent>
    <Buttons>
        <button class="btn btn-primary" @onclick="@CreateAsync">Create</button>
        <button class="btn" @onclick="@ClearValues">Clear</button>
    </Buttons>
</Modal>

<Confirm @ref="PrerequisitesConfirm" Message="To create an expense, you need to first create a currency and category." OnConfirmed="OnPrerequisitesConfirmed" />