@inherits ModalDialog

@code
{
    RenderFragment FieldTab(SelectedField field, bool isFilled, string icon, string iconPrefix, RenderFragment value)
    {
        return
            @<li class="nav-item">
                <a class="nav-link @(Selected == field ? "text-primary" : (!isFilled ? "text-muted" : ""))" @onclick="(() => Selected = field)">
                    <h1>
                        <Icon Prefix="@iconPrefix" Identifier="@icon" />
                    </h1>
                    <span>
                        @value
                    </span>
                </a>
            </li>
        ;
    }
}

<Modal @ref="Modal" Title="Expense wizard" IsOverflow="true">
    <ul class="nav nav-fill mb-3">
        @FieldTab(SelectedField.Description, !String.IsNullOrEmpty(Description), "comment", null, @<span>@Description</span>)
        @FieldTab(SelectedField.Amount, Amount != null, "dollar-sign", null, 
            @<span>
                @if (Amount != null)
                {
                    @CurrencyFormatter?.Format(Amount)
                }
            </span>
        )
        @FieldTab(SelectedField.Category, !CategoryKey.IsEmpty, "tag", null, 
            @<span>
                @if (!CategoryKey.IsEmpty)
                {
                    <CategoryTag Key="@CategoryKey" />
                }
            </span>
        )
        @FieldTab(SelectedField.When, When != DateTime.MinValue, "calendar", null, 
            @<span>
                @if (When != DateTime.MinValue)
                {
                    <DateValue Value="When" />
                }
            </span>
        )
    </ul>
    @if (Selected == SelectedField.Description)
    {
        <input type="text" class="form-control" placeholder="Expense Description" data-autofocus @bind="@Description" @bind:event="oninput" @bind:after="SuggestTemplates" />

        <div class="form-row mt-3">
            @foreach (var model in SuggestedTemplates)
            {
                <div class="col-6 col-sm-6 col-md-4">
                    <div class="card card-hover cursor-pointer" @onclick="(async () => await ApplyTemplateAsync(model))">
                        <div class="card-body">
                            <div>
                                <strong>
                                    @CurrencyFormatter.Format(model.Amount, CurrencyFormatter.FormatZero.Placehoder)
                                </strong>
                            </div>

                            @if (!model.CategoryKey.IsEmpty)
                            {
                                <CategoryTag Key="@model.CategoryKey" />
                            }

                            @if (!String.IsNullOrEmpty(model.Description) || model.IsFixed)
                            {
                                <p class="text-truncate">
                                    <small>
                                        @model.Description

                                        @if (model.IsFixed)
                                        {
                                        <em class="text-muted ml-1">Fixed</em>
                                        }
                                    </small>
                                </p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (Selected == SelectedField.Amount)
    {
        <AmountBox AutoFocus="true" AutoSelect="true" @bind-Value="@Amount" />
    }
    else if (Selected == SelectedField.When)
    {
        <DateBox @bind-Value="When" AutoFocus="true" />
    }
    else if (Selected == SelectedField.Category)
    {
        if (Categories != null)
        {
            var isFistCategory = true;

            <div class="form-row">
                @foreach (var category in Categories)
                {
                    var buttonId = isFistCategory ? "expense-template-category-first" : null;
                    isFistCategory = false;

                    <div class="col-6 col-md-4 mb-2">
                        <button type="button" id="@buttonId" class="btn btn-block btn-selectable h-100 @(category.Key.Equals(CategoryKey) ? "btn-selectable-selected" : "") @category.Color.SelectAccent("back-dark", "back-light")" style="background-color: @category.Color.ToHashCode();" @onclick="@(() => CategoryKey = category.Key)">
                            <div>
                                <h2>@category.Icon</h2>
                            </div>
                            <div class="text-truncate">
                                <strong>@category.Name</strong>
                            </div>
                            <div class="text-truncate">
                                <span>@category.Description</span>
                            </div>
                        </button>
                    </div>
                }
            </div>
        }
    }
</Modal>