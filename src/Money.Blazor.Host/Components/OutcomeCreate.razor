@inherits ModalDialog

<Modal @ref="Modal" Title="@Title" IsOverflow="true">
    <ChildContent>
        @if (Templates != null)
        {
            <button class="btn bg-light-subtle d-block w-100 text-start mb-3" @onclick="(() => AreTemplatesOpened = !AreTemplatesOpened)">
                <Icon Identifier="redo" />
                Templates
            </button>
            @if (AreTemplatesOpened)
            {
                <style>
                    .card.card-hover {
                        height: calc(100% - 15px);
                    }
                </style>
                <div class="row">
                    @foreach (var model in Templates)
                    {
                        <div class="col-6 col-sm-6 col-md-4">
                            <div class="card card-hover cursor-pointer" @onclick="(async () => await ApplyTemplateAsync(model))">
                                <div class="card-body">
                                    <div>
                                        <strong>
                                            @CurrencyFormatter.Format(model.Amount, CurrencyFormatter.FormatZero.Placehoder)
                                        </strong>
                                    </div>

                                    @if (!model.CategoryKey.IsEmpty)
                                    {
                                        <p class="m-0 @FindCategoryColor(model.CategoryKey)?.SelectAccent("back-dark", "back-light")">
                                            <span class="badge" style="background-color: @FindCategoryColor(model.CategoryKey)?.ToHashCode()">@FindCategoryName(model.CategoryKey)</span>
                                        </p>
                                    }

                                    @if (!String.IsNullOrEmpty(model.Description) || model.IsFixed)
                                    {
                                        <p class="text-truncate">
                                            <small>
                                                @model.Description

                                                @if (model.IsFixed)
                                                {
                                                    <em class="text-muted ms-1">Fixed</em>
                                                }
                                            </small>
                                        </p>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
        <Validation ErrorMessages="@ErrorMessages" />
        <div class="mb-3">
            <label class="form-label" for="@(IdPrefix + "expense-amount")">Amount:</label>
            <AmountBox Id="@(IdPrefix + "expense-amount")" AutoSelect="true" @bind-Value="Amount" />
        </div>
        <div class="mb-3">
            <label class="form-label" for="@(IdPrefix + "expense-description")">Description:</label>
            <input type="text" class="form-control" id="@(IdPrefix + "expense-description")" @bind="Description" />
        </div>
        <div class="mb-3">
            <label class="form-label" for="@(IdPrefix + "expense-when")">When:</label>
            <DateBox Id="@(IdPrefix + "expense-when")" @bind-Value="When" />
        </div>
        <div class="mb-3">
            <label class="form-label">Category:</label>
            @if (Categories != null)
            {
                var isFistCategory = true;

                <div class="row g-2">
                    @foreach (var category in Categories)
                    {
                        var buttonId = isFistCategory ? IdPrefix + "expense-category-first" : null;
                        isFistCategory = false;

                        <div class="col-6 col-md-4 d-grid">
                            <button type="button" id="@buttonId" class="btn btn-selectable h-100 @(category.Key.Equals(CategoryKey) ? "btn-selectable-selected" : "") @category.Color.SelectAccent("back-dark", "back-light")" style="background-color: @category.Color.ToHashCode();" @onclick="@(() => CategoryKey = category.Key)">
                                <div>
                                    <h2>@category.Icon</h2>
                                </div>
                                <div class="text-truncate">
                                    <strong>@category.Name</strong>
                                </div>
                                <div class="text-truncate">
                                    <span>@category.Description</span>
                                </div>
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="checkbox">
            <label>
                <input type="checkbox" @bind="IsFixed" />
                Fixed
                <span class="text-muted">(isn't shown in summary)</span>
            </label>
        </div>
    </ChildContent>
    <Buttons>
        <button class="btn btn-primary" @onclick="@OnSaveClickAsync">@SaveButtonText</button>
    </Buttons>
</Modal>
<Confirm @ref="PrerequisitesConfirm" Message="To create an expense, you need to first create a currency and category." OnConfirmed="OnPrerequisitesConfirmed" />
