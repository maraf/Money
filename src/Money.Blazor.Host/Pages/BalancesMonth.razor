@attribute [Authorize]
@page "/{Year:int}/balances"

@code
{
    RenderFragment RenderBalanceValue(Price incomes, Price expenses, string containerCssClass = null, string totalValueCssClass = null)
    {
        return
        @<div class="@containerCssClass">
            @if (SelectedDisplayType == BalanceDisplayType.Total)
            {
                <small class="text-success @totalValueCssClass">
                    @CurrencyFormatter.Format(incomes)
                </small>
                <small class="text-danger @totalValueCssClass">
                    @CurrencyFormatter.Format(expenses)
                </small>
            }
            else
            {
                var diff = incomes - expenses;
                <small class="@(diff.Value > 0 ? "text-success" : "text-danger")">
                    @CurrencyFormatter.Format(diff, applyPlusForPositiveNumbers: true)
                </small>
            }
        </div>;
    }
}

<Title Icon="chart-bar" Main="@($"Balances in {Year}")" Sub="Compare incomes and expences" />

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <PeriodSelector Selected="SelectedPeriod" Previous="PeriodGuesses" ExactGetter="GetYearsAsync" LinkFactory="@(year => Navigator.UrlBalances(year))" />
    </div>
    @RenderBalanceValue(TotalIncomes, TotalExpenses, "fs-5")
    <EnumSelector Icon="eye" Text="Display" TType="BalanceDisplayType" @bind-Current="@SelectedDisplayType" Changed="StateHasChanged" />
</div>

@if (Models == null)
{
    <Loading />
}
else
{
    <div class="row no-gutters" style="min-height: calc(100vh - 382px)">
        @foreach (var model in Models)
        {
            var expenseSize = MaxAmount == 0 ? 0 : model.ExpenseSummary.Value / MaxAmount * 100;
            var incomeSize = MaxAmount == 0 ? 0 : model.IncomeSummary.Value / MaxAmount * 100;

            <div class="col-12 col-lg-1 @(model > DateTime.Today ? "text-muted" : String.Empty)">
                <div class="d-none d-lg-flex p-1 p-lg-3 h-100 w-100 vertical-bar">
                    <div class="w-100 bg-success" style="height: @incomeSize%"></div>
                    <div class="w-100 bg-danger ms-1" style="height: @expenseSize%"></div>
                </div>
                <div class="p-1">
                    <div class="d-flex justify-content-between align-items-center d-lg-none text-start">
                        <a href="@Navigator.UrlOverview(model)">
                            @model.ToMonthString()
                        </a>
                        @RenderBalanceValue(model.IncomeSummary, model.ExpenseSummary)
                    </div>
                    <div class="d-none d-lg-block text-center mt-1">
                        @RenderBalanceValue(model.IncomeSummary, model.ExpenseSummary, "d-none d-lg-block text-center mt-1", "d-block")
                        <div class="text-center mt-1">
                            <a href="@Navigator.UrlOverview(model)">
                                <span class="d-none d-lg-inline">
                                    @model.ToMonthString()
                                </span>
                                <span class="d-inline d-lg-none">
                                    @model.Month.ToString("D2")
                                </span>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="d-block d-lg-none p-1 p-lg-3 mb-2">
                    <div class="bg-success" style="width: @incomeSize%; height: 10px"></div>
                    <div class="bg-danger mt-1" style="width: @expenseSize%; height: 10px"></div>
                </div>
            </div>
        }
    </div>
}