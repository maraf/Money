@typeparam T

@code
{
    enum TotalType { Income, Expense, Balance }

    RenderFragment TotalItem(TotalType type, string description, Price value)
    {
        if (value == null)
            return null;

        var rowCssClass = "d-flex " + (type switch 
        {
            TotalType.Balance => "mt-3",
            _ => null
        });
        var icon = type switch
        {
            TotalType.Income => "indent",
            TotalType.Expense => "outdent",
            TotalType.Balance => "calculator",
        };
        var valueCssClass = "col-auto " + (type switch
        {
            TotalType.Income => "text-success",
            TotalType.Expense => "text-danger",
            TotalType.Balance => (value.Value > 0 ? "text-success" : "text-danger") + " fw-bold",
        });
        return
            @<div class="@rowCssClass">
                <Icon Identifier="@icon" class="align-self-center icon" />
                <span class="flex-grow-1">@description</span>

                <div class="@valueCssClass">
                    @FormatPrice(value, CurrencyFormatter.FormatZero.Zero, applyPlusForPositiveNumbers: type == TotalType.Balance)
                </div>
            </div>
        ;
    }

    RenderFragment BarItem(string icon, string description, RenderFragment amount, string title = null, string barWidth = null, string barColor = null)
    {
        return 
            @<div class="card-body">
                <div class="d-flex">
                    <div class="icon fs-3">
                        @icon
                    </div>
                    <h3 class="align-self-center flex-grow-1 m-0 fs-6" title="@title">
                        @description
                    </h3>

                    <div class="align-self-center">
                        @amount
                    </div>
                </div>
                @if (barWidth != null)
                {
                    <div class="bar-cover">
                        <div class="bar" style="width: @barWidth%; background-color: @barColor;"></div>
                    </div>
                }
            </div>
        ;
    }
}

<Title Icon="signal" Main="Summary" Sub="@SubTitle">
    <ButtonContent>
        <IncomeCreateButton OnClick="IncomeCreate.Show" />
        <ExpenseCreateButton />
    </ButtonContent>
</Title>
<ExceptionPanel />

<IncomeCreate @ref="IncomeCreate" />

<div class="summary">
    <ExpenseBagPublishButton Text="You have expenses created when offline. Upload them now..." class="mb-4" />

    @if (SelectedPeriod != null)
    { 
        <div class="d-flex justify-content-between mb-3">
            <div>
                <PeriodSelector Selected="SelectedPeriod" Previous="PeriodGuesses" ExactGetter="GetPeriodsAsync" LinkFactory="UrlSummary" />
                <span class="ps-2">
                    <Loading Context="@CategoriesLoading" />
                </span>
            </div>
            <div class="d-flex">
                <EnumSelector Icon="eye" Text="Display" TType="SummaryDisplayType" @bind-Current="@SelectedDisplayType" Changed="StateHasChanged" />
                <span class="ps-2">
                    <SortButton TType="SummarySortType" @bind-Current="@SortDescriptor" Changed="@OnSorted" />
                </span>
            </div>
        </div>
    }

    @if (ExistingExpenseTotal != null && ExistingExpenseTotal.Value == 0 && (IncomeTotal == null || IncomeTotal.Value == 0))
    {
        <Alert Title="No data." Message="Let's add some expenses." Mode="@AlertMode.Warning" />
    }
    else if (Categories != null)
    {
        <div class="graph">
            @if (ExistingExpenseTotal != null || IncomeTotal != null)
            {
                <div class="card bar-graph bar-graph-summary" @onclick="@(() => OpenOverview(SelectedPeriod))">
                    @if (SelectedDisplayType == SummaryDisplayType.Balance)
                    {
                        <div class="card-body">
                            @TotalItem(TotalType.Income, "Incomes", IncomeTotal)
                            @TotalItem(TotalType.Expense, "Existing expenses", ExistingExpenseTotal)
                            @TotalItem(TotalType.Expense, "Expected expenses", ExpectedExpenseTotal)
                            @TotalItem(TotalType.Balance, "Balance", GetBalanceTotal())
                        </div>
                    }
                    else
                    {
                        @BarItem(
                            icon: "📈",
                            description: "Summary",
                            amount: @<span class="fw-bold">
                                @if (SelectedDisplayType == SummaryDisplayType.Total)
                                {
                                    @if (IncomeTotal != null)
                                    {
                                        <span class="text-success me-2" @onclick="@(() => OpenOverviewIncomes(SelectedPeriod))" @onclick:stopPropagation="true">
                                            @FormatPrice(IncomeTotal)
                                        </span>
                                    }

                                    <span class="text-danger">
                                        @FormatPrice(ExistingExpenseTotal, CurrencyFormatter.FormatZero.Zero)
                                    </span>
                                }
                                else
                                {
                                    var diff = GetBalanceTotal();
                                    <span class="@(diff.Value > 0 ? "text-success" : "text-danger")">
                                        @FormatPrice(diff, applyPlusForPositiveNumbers: true)
                                    </span>
                                }
                            </span>
                        )
                    }
                </div>
            }

            @foreach (var category in Categories)
            {
                <div class="card bar-graph cursor-pointer" @onclick="() => OpenOverview(SelectedPeriod, category.Key)">
                    @BarItem(
                        icon: category.Icon,
                        description: category.Name,
                        title: category.Description,
                        barWidth: GetPercentualValue(category),
                        barColor: category.Color.ToHashCode(),
                        amount: @<span>
                            @if (category.Version == 2 != null && category.FixedAmount.Value > 0)
                            {
                                <span class="text-muted" style="opacity: .5;">@FormatPrice(category.FixedAmount) + </span>
                            }
                            @FormatPrice(category.Version == 1 ? category.TotalAmount : category.Amount, CurrencyFormatter.FormatZero.Zero)
                        </span>
                    )
                </div>
            }
        </div>
    }
</div>