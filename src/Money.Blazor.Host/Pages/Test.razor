@page "/test"

<Title Main="Test" />

<div style="margin-top: 5rem;">
    @if (ExpenseTemplates == null)
    {
        <em>Loading...</em>
    }
    else
    {
        <table class="table">
            @foreach (var expenseTemplate in ExpenseTemplates)
            {
                <tr>
                    <td>
                        @expenseTemplate.Key
                    </td>
                    <td>
                        @expenseTemplate.Amount
                    </td>
                    <td>
                        @expenseTemplate.Description
                    </td>
                    <td>
                        @expenseTemplate.CategoryKey
                    </td>
                    <td>
                        @expenseTemplate.IsFixed
                    </td>
                    <td>
                        @(expenseTemplate.Period?.ToString() ?? "null") @expenseTemplate.DayInPeriod @expenseTemplate.DueDate
                    </td>
                    <td>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await ChangeAmount(expenseTemplate)">Amount</button>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await ChangeDescription(expenseTemplate)">Description</button>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await ChangeCategory(expenseTemplate, false)">Category</button>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await ChangeCategory(expenseTemplate, true)">Clear category</button>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await ChangeFixed(expenseTemplate)">Fixed</button>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await SetRecurrenceMonthly(expenseTemplate)">Recurrence monthly</button>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await SetRecurrenceSingle(expenseTemplate)">Recurrence single</button>
                        <button class="btn btn-sm m-1 btn-primary" @onclick="async () => await ClearRecurrence(expenseTemplate)">Clear recurrence</button>
                        <button class="btn btn-sm m-1 btn-danger" @onclick="async () => await Commands.HandleAsync(new DeleteExpenseTemplate(expenseTemplate.Key))">Delete</button>
                    </td>
                </tr>
            }
        </table>

        <button class="btn btn-primary" @onclick="CreateAsync">Create expense template</button>
    }
</div>

@code
{
    private async Task ChangeAmount(ExpenseTemplateModel expenseTemplate)
    {
        await Commands.HandleAsync(new ChangeExpenseTemplateAmount(expenseTemplate.Key, new Price(666, "CZK")));
    }

    private async Task ChangeDescription(ExpenseTemplateModel expenseTemplate)
    {
        await Commands.HandleAsync(new ChangeExpenseTemplateDescription(expenseTemplate.Key, "Hello, World!"));
    }

    private async Task ChangeCategory(ExpenseTemplateModel expenseTemplate, bool clear)
    {
        if (clear)
            await Commands.HandleAsync(new ChangeExpenseTemplateCategory(expenseTemplate.Key, GuidKey.Empty("Category")));
        else
            await Commands.HandleAsync(new ChangeExpenseTemplateCategory(expenseTemplate.Key, ExpenseTemplates.First().CategoryKey));
    }

    private async Task ChangeFixed(ExpenseTemplateModel expenseTemplate)
    {
        await Commands.HandleAsync(new ChangeExpenseTemplateFixed(expenseTemplate.Key, !expenseTemplate.IsFixed));
    }

    private async Task SetRecurrenceMonthly(ExpenseTemplateModel expenseTemplate)
    {
        await Commands.HandleAsync(new SetExpenseTemplateMonthlyRecurrence(expenseTemplate.Key, 5));
    }

    private async Task SetRecurrenceSingle(ExpenseTemplateModel expenseTemplate)
    {
        await Commands.HandleAsync(new SetExpenseTemplateSingleRecurrence(expenseTemplate.Key, AppDateTime.Today.AddDays(12)));
    }

    private async Task ClearRecurrence(ExpenseTemplateModel expenseTemplate)
    {
        await Commands.HandleAsync(new ClearExpenseTemplateRecurrence(expenseTemplate.Key));
    }
}