@using Money.Models.Sorting
@using Money.Components
@using Money.Components.Settings
@page "/user/settings"
@attribute [Authorize]

<UserHead />

<div class="row my-4 mx-1">
    @foreach (var viewModel in ViewModels)
    {
        <div class="col-12 col-md-auto mb-4">
            <button class="btn btn-light text-truncate text-start w-100" @onclick="viewModel.Edit">
                @if (viewModel.Icon != null)
                {
                    <Icon Identifier="@viewModel.Icon" class="me-1" />
                }

                <strong>
                    @(viewModel.Title + ": ")
                </strong>
                @(viewModel.Model?.Value ?? viewModel.DefaultValue)
            </button>
        </div>
    }
</div>

<PropertyDialog @ref="PriceDecimalsEditor" Model="@PriceDecimals" Title="Set price decimals">
    <div class="mb-3">
        <input type="text" class="form-control" @bind="PriceDecimals.CurrentValue" data-autofocus />
    </div>
</PropertyDialog>


<PropertyDialog @ref="DateFormatEditor" Model="@DateFormat" Title="Set date format">
    <div class="mb-3">
        <input type="text" class="form-control" @bind="DateFormat.CurrentValue" data-autofocus />
    </div>
</PropertyDialog>

<PropertyDialog @ref="MobileMenuEditor" Model="@MobileMenu" Title="Modify mobile menu">
    @if (MobileMenu.AvailableModels != null && MobileMenu.SelectedIdentifiers != null)
    {
        foreach (var model in MobileMenu.AvailableModels)
        {
            var isContained = MobileMenu.SelectedIdentifiers.Contains(model.Identifier);
            Action handler = model.IsRequired
                ? () => { }
                : isContained 
                    ? () => MobileMenu.SelectedIdentifiers.Remove(model.Identifier) 
                    : () => MobileMenu.SelectedIdentifiers.Add(model.Identifier);

            <div @key="model.Identifier" class="alert @(isContained ? "alert-primary" : "alert-light") cursor-pointer" @onclick="handler">
                <Icon Identifier="@model.Icon" class="me-2" />
                @model.Text
                @if (model.IsRequired)
                {
                    <i class="ms-2">Required</i>
                }
            </div>
        }
    }
</PropertyDialog>

<PropertyDialog @ref="SummarySortEditor" Model="@SummarySort" Title="Set summary sort">
    <SortDescriptorEditor T="SummarySortType" @bind-Property="SummarySort.Property" @bind-Direction="SummarySort.Direction" />
</PropertyDialog>

<PropertyDialog @ref="ExpenseOverviewSortEditor" Model="@ExpenseOverviewSort" Title="Set expense overview sort">
    <SortDescriptorEditor T="OutcomeOverviewSortType" @bind-Property="ExpenseOverviewSort.Property" @bind-Direction="ExpenseOverviewSort.Direction" />
</PropertyDialog>

<PropertyDialog @ref="SearchSortEditor" Model="@SearchSort" Title="Set search sort">
    <SortDescriptorEditor T="OutcomeOverviewSortType" @bind-Property="SearchSort.Property" @bind-Direction="SearchSort.Direction" />
</PropertyDialog>

<PropertyDialog @ref="BalanceDisplayEditor" Model="@BalanceDisplay" Title="Set balance display">
    <EnumEditor T="BalanceDisplayType" @bind-Property="BalanceDisplay.Property" />
</PropertyDialog>

<PropertyDialog @ref="SummaryDisplayEditor" Model="@SummaryDisplay" Title="Set summary display">
    <EnumEditor T="SummaryDisplayType" @bind-Property="SummaryDisplay.Property" />
</PropertyDialog>

<PropertyDialog @ref="ExpenseTemplateSortEditor" Model="@ExpenseTemplateSort" Title="Set expense template sort">
    <SortDescriptorEditor T="ExpenseTemplateSortType" @bind-Property="ExpenseTemplateSort.Property" @bind-Direction="ExpenseTemplateSort.Direction" />
</PropertyDialog>

<PropertyDialog @ref="ExpenseDialogCreateEditor" Model="@ExpenseDialogCreate" Title="Set expense create dialog type">
    <EnumEditor T="ExpenseCreateDialogType" @bind-Property="ExpenseDialogCreate.Property" />
</PropertyDialog>

<PropertyDialog @ref="ThemeEditor" Model="@Theme" Title="Set color theme">
    <EnumEditor T="ThemeType" @bind-Property="Theme.Property" />
</PropertyDialog>